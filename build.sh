#!/usr/bin/env bash
set -eo pipefail


# Define helper functions.

# join_array joins the elements of the $2 array into a
# single string, placing $1 between each element.

function join_array {
  local sep="$1" out="$2"
  if shift 2; then
    for arg in "$@"; do
      out="$out $sep $arg"
    done
  fi
  echo "$out"
}


# escape_quotes adds an extra layer of single quotes
# around it's arguments. Any single quotes included
# in the arguments are escaped with backslashes.
#
# TODO: Figure out a way around this.
# We need this function because the './build.sh -- args'
# usecase passes 'args' as arguments to a Docker container
# via the shell version of the CMD directive. This is done
# by the docker-compose.yaml file when running the 'fdbq'
# service. The list version of the CMD directive cannot be
# used because this script passes these args via an env
# var, and there is no way to convert an env var to a YAML
# list in the docker-compose.yaml file.

function escape_quotes {
  out=()
  for arg in "$@"; do
    out+=("$(printf "'%s'" "${arg//'/\\'}")")
  done
  echo "${out[@]}" 
}


# src_version returns a unique string for each version of
# the FDBQ source code.

function src_version {
  git rev-parse --short HEAD
}


# Change directory to repo root.

cd "${0%/*}"


# Parse the flags.

function help_msg {
  echo "build.sh is a facade for 'docker compose'."
  echo "It runs a set of optional tasks in the order"
  echo "specified below. This is the same script used"
  echo "by CI/CD to build, test, and package FDBQ."
  echo
  echo "If the '--build build' flag is set then the"
  echo "script starts off by running 'docker build'"
  echo "for the 'fdbq-build:latest' docker image."
  echo "This image is used to run the 'generated'"
  echo "and 'verify' tasks below."
  echo
  echo "If the '--generated' flag is set then the"
  echo "script checks if the code generated by"
  echo "'go generate ./...' is up to date."
  echo
  echo "If the '--verify' flag is set then the script"
  echo "builds, lints, and tests the codebase. This task"
  echo "interacts with an FDB docker container which is"
  echo "started the first time this task is run."
  echo
  echo "If the '--build fdbq' flag is set then the script"
  echo "runs 'docker build' for the 'fdbq' docker image."
  echo "The tag is determined by the git tag/hash and the"
  echo "version of the FDB library specified in the '.env'"
  echo "file."
  echo
  echo "If the '--' flag is provided then all the args"
  echo "after this flag are passed to an instance of the"
  echo "'fdbq' docker image. Normally this image expects"
  echo "a cluster file as the first argument but this"
  echo "script takes care of starting an FDB cluster and"
  echo "providing the cluster file as the first argument."
  echo "Note that this is the same FDB instance used by"
  echo "the 'verify' task."
  echo
  echo "  ./docker.sh -- --write '/my/dir{\"hi\"}=nil'"
  echo
  echo "After this, the script ends. If any of the"
  echo "requested tasks fail then the script exits"
  echo "immediately."
  echo
  echo "Multiple image names can be specified on the"
  echo "'--build' flag by separating them with commas."
  echo
  echo "  ./docker.sh --build build,fdbq"
  echo
  echo "When building Docker images, the dependencies of"
  echo "the Dockerfile are specified in the '.env' file."
  echo "When this file is changed, you'll need to rebuild"
  echo "the docker images for the changes to take effect."
}

if [[ $# -eq 0 ]]; then
  echo "ERR! At least one flag must be provided."
  echo
  help_msg
  exit 1
fi

while [[ $# -gt 0 ]]; do
  case $1 in
    --generated)
      VERIFY_GENERATION="x"
      shift 1
      ;;

    --verify)
      VERIFY_CODEBASE="x"
      shift 1
      ;;

    --build)
      for service in $(echo "$2" | tr "," "\n"); do
        case $service in
          build)
            BUILD_BUILD_CONTAINER="x"
            ;;
          fdbq)
            BUILD_FDBQ_CONTAINER="x"
            ;;
          *)
            echo "ERR! Invalid build target '$service'"
            exit 1
            ;;
        esac
      done
      shift 2
      ;;

    --help)
      help_msg
      exit 0
      ;;

    --)
      shift 1
      FDBQ_ARGS=("$@")
      shift $#
      ;;

    *)
      echo "ERR! Invalid flag '$1'"
      exit 1
  esac
done


# Build variables required by the docker compose command.

BUILD_TASKS=()

if [[ -n "$VERIFY_GENERATION" ]]; then
  BUILD_TASKS+=('./scripts/verify_generation.sh')
fi

if [[ -n "$VERIFY_CODEBASE" ]]; then
  BUILD_TASKS+=('./scripts/setup_database.sh')
  BUILD_TASKS+=('./scripts/verify_codebase.sh')
fi

BUILD_COMMAND="$(join_array ' && ' "${BUILD_TASKS[@]}")"
echo "BUILD_COMMAND=${BUILD_COMMAND}"
export BUILD_COMMAND

BUILD_TAG="$(src_version)"
echo "BUILD_TAG=${BUILD_TAG}"
export BUILD_TAG

FDBQ_COMMAND="$(escape_quotes "${FDBQ_ARGS[@]}")"
echo "FDBQ_COMMAND=${FDBQ_COMMAND}"
export FDBQ_COMMAND

FDBQ_TAG="$(src_version)"
echo "FDBQ_TAG=${FDBQ_TAG}"
export FDBQ_TAG


# Run the requested commands.

if [[ -n "$BUILD_BUILD_CONTAINER" ]]; then
  (set -x;
    docker compose build build
  )
fi

if [[ -n "$BUILD_COMMAND" ]]; then
  (set -x;
    docker compose up build --attach build --exit-code-from build
  )
fi

if [[ -n "$BUILD_FDBQ_CONTAINER" ]]; then
  (set -x;
    docker compose build fdbq
  )
fi

if [[ -n "$FDBQ_COMMAND" ]]; then
  (set -x;
    docker compose up fdbq --attach fdbq --exit-code-from fdbq
  )
fi
