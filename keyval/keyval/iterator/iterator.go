package iterator

import (
	"fmt"

	q "github.com/janderland/fdbq/keyval/keyval"
	"github.com/pkg/errors"
)

// A TupleErrorMode is passed to ReadTuple and
// modifies the way ReadTuple fails.
type TupleErrorMode = int

const (
	// AllErrors tells ReadTuple to check for
	// a LongTupleError.
	AllErrors TupleErrorMode = iota

	// AllowLong tells ReadTuple to not check
	// for a LongTupleError.
	AllowLong
)

// A ConversionError is returned by ReadTuple when the
// TupleIterator fails to convert a Tuple element to
// the requested type.
type ConversionError struct {
	error
	InValue interface{}
	OutType interface{}
	Index   int
}

func (x ConversionError) Error() string {
	return fmt.Sprintf("failed to convert element %d from %v to %T", x.Index, x.InValue, x.OutType)
}

var (
	// ShortTupleError is returned by ReadTuple when the TupleIterator
	// reads beyond the length of the Tuple.
	ShortTupleError = errors.New("read past end of tuple")

	// LongTupleError is returned by ReadTuple when the entire Tuple
	// is not consumed. This error isn't returned when ReadTuple is
	// given the AllowLong flag.
	LongTupleError = errors.New("did not parse entire tuple")
)

// ReadTuple provides a way to iterate over a Tuple's elements and convert each element to it's
// expected type. The caller-provided function uses a TupleIterator to read each of the Tuple's
// elements is sequential order. Any errors generated by the caller-provided function are returned
// as is. Additionally, ReadTuple may return ShortTupleError, LongTupleError, or an instance of
// ConversionError. See these errors for more information on when they are returned.
func ReadTuple(t q.Tuple, mode TupleErrorMode, f func(*TupleIterator) error) (err error) {
	defer func() {
		if e := recover(); e != nil {
			if e, ok := e.(ConversionError); ok {
				err = e
				return
			}
			if e == ShortTupleError {
				err = ShortTupleError
				return
			}
			panic(e)
		}
	}()

	p := TupleIterator{t: t}
	if err := f(&p); err != nil {
		return err
	}

	if mode == AllErrors && p.i != len(t) {
		return LongTupleError
	}
	return nil
}

// Generate the TupleIterator methods.
//go:generate go run ./must -types Bool,Int,Uint,BigInt,Float,String,Bytes,UUID,Tuple

// TupleIterator provides methods for reading each Tuple element
// and converting the read element to an expected type. It is
// meant to be created by the ReadTuple function. For more
// information, see the ReadTuple documentation.
type TupleIterator struct {
	t q.Tuple
	i int
}

func (x *TupleIterator) Any() q.TupElement {
	if x.i >= len(x.t) {
		panic(ShortTupleError)
	}

	val := x.t[x.i]
	x.i++
	return val
}
