// Code generated by must -types Bool,Int,Uint,BigInt,Float,String,Bytes,UUID,Tuple. DO NOT EDIT.
package iterator

import q "github.com/janderland/fdbq/keyval/keyval"

func (x *TupleIterator) MustBool() q.Bool {
	val, err := x.Bool()
	if err != nil {
		panic(err)
	}
	return val
}

func (x *TupleIterator) MustInt() q.Int {
	val, err := x.Int()
	if err != nil {
		panic(err)
	}
	return val
}

func (x *TupleIterator) MustUint() q.Uint {
	val, err := x.Uint()
	if err != nil {
		panic(err)
	}
	return val
}

func (x *TupleIterator) MustBigInt() q.BigInt {
	val, err := x.BigInt()
	if err != nil {
		panic(err)
	}
	return val
}

func (x *TupleIterator) MustFloat() q.Float {
	val, err := x.Float()
	if err != nil {
		panic(err)
	}
	return val
}

func (x *TupleIterator) MustString() q.String {
	val, err := x.String()
	if err != nil {
		panic(err)
	}
	return val
}

func (x *TupleIterator) MustBytes() q.Bytes {
	val, err := x.Bytes()
	if err != nil {
		panic(err)
	}
	return val
}

func (x *TupleIterator) MustUUID() q.UUID {
	val, err := x.UUID()
	if err != nil {
		panic(err)
	}
	return val
}

func (x *TupleIterator) MustTuple() q.Tuple {
	val, err := x.Tuple()
	if err != nil {
		panic(err)
	}
	return val
}

