// Code generated by operation -op-name Tuple -param-name TupElement -types Tuple,Nil,Int,Uint,Bool,Float,BigInt,String,UUID,Bytes,Variable,MaybeMore. DO NOT EDIT.
package keyval

type (
	TupleOperation interface {
		ForTuple(Tuple)
		ForNil(Nil)
		ForInt(Int)
		ForUint(Uint)
		ForBool(Bool)
		ForFloat(Float)
		ForBigInt(BigInt)
		ForString(String)
		ForUUID(UUID)
		ForBytes(Bytes)
		ForVariable(Variable)
		ForMaybeMore(MaybeMore)
	}

	TupElement interface {
		TupElement(TupleOperation)
		Eq(interface{}) bool
	}
)

func _() {
	var (
		Tuple     Tuple
		Nil       Nil
		Int       Int
		Uint      Uint
		Bool      Bool
		Float     Float
		BigInt    BigInt
		String    String
		UUID      UUID
		Bytes     Bytes
		Variable  Variable
		MaybeMore MaybeMore

		_ TupElement = &Tuple
		_ TupElement = &Nil
		_ TupElement = &Int
		_ TupElement = &Uint
		_ TupElement = &Bool
		_ TupElement = &Float
		_ TupElement = &BigInt
		_ TupElement = &String
		_ TupElement = &UUID
		_ TupElement = &Bytes
		_ TupElement = &Variable
		_ TupElement = &MaybeMore
	)
}

func (x Tuple) TupElement(op TupleOperation) {
	op.ForTuple(x)
}

func (x Nil) TupElement(op TupleOperation) {
	op.ForNil(x)
}

func (x Int) TupElement(op TupleOperation) {
	op.ForInt(x)
}

func (x Uint) TupElement(op TupleOperation) {
	op.ForUint(x)
}

func (x Bool) TupElement(op TupleOperation) {
	op.ForBool(x)
}

func (x Float) TupElement(op TupleOperation) {
	op.ForFloat(x)
}

func (x BigInt) TupElement(op TupleOperation) {
	op.ForBigInt(x)
}

func (x String) TupElement(op TupleOperation) {
	op.ForString(x)
}

func (x UUID) TupElement(op TupleOperation) {
	op.ForUUID(x)
}

func (x Bytes) TupElement(op TupleOperation) {
	op.ForBytes(x)
}

func (x Variable) TupElement(op TupleOperation) {
	op.ForVariable(x)
}

func (x MaybeMore) TupElement(op TupleOperation) {
	op.ForMaybeMore(x)
}

