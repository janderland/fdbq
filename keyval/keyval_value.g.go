// Code generated by: operation -op-name Value -param-name value -types Tuple,Nil,Int,Uint,Bool,Float,String,UUID,Bytes,Variable,Clear. DO NOT EDIT.

package keyval

type (
	ValueOperation interface {
		ForTuple(Tuple)
		ForNil(Nil)
		ForInt(Int)
		ForUint(Uint)
		ForBool(Bool)
		ForFloat(Float)
		ForString(String)
		ForUUID(UUID)
		ForBytes(Bytes)
		ForVariable(Variable)
		ForClear(Clear)
	}

	value interface {
		Value(ValueOperation)
		Eq(interface{}) bool
	}
)

func _() {
	var (
		Tuple    Tuple
		Nil      Nil
		Int      Int
		Uint     Uint
		Bool     Bool
		Float    Float
		String   String
		UUID     UUID
		Bytes    Bytes
		Variable Variable
		Clear    Clear

		_ value = &Tuple
		_ value = &Nil
		_ value = &Int
		_ value = &Uint
		_ value = &Bool
		_ value = &Float
		_ value = &String
		_ value = &UUID
		_ value = &Bytes
		_ value = &Variable
		_ value = &Clear
	)
}

func (x Tuple) Value(op ValueOperation) {
	op.ForTuple(x)
}

func (x Nil) Value(op ValueOperation) {
	op.ForNil(x)
}

func (x Int) Value(op ValueOperation) {
	op.ForInt(x)
}

func (x Uint) Value(op ValueOperation) {
	op.ForUint(x)
}

func (x Bool) Value(op ValueOperation) {
	op.ForBool(x)
}

func (x Float) Value(op ValueOperation) {
	op.ForFloat(x)
}

func (x String) Value(op ValueOperation) {
	op.ForString(x)
}

func (x UUID) Value(op ValueOperation) {
	op.ForUUID(x)
}

func (x Bytes) Value(op ValueOperation) {
	op.ForBytes(x)
}

func (x Variable) Value(op ValueOperation) {
	op.ForVariable(x)
}

func (x Clear) Value(op ValueOperation) {
	op.ForClear(x)
}

